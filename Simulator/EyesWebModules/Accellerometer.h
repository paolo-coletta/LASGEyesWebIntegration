#pragma once



class CAccellerometer : public Eyw::CBlockImpl
{
public:
	//////////////////////////////////////////////////////////
	/// <summary>
	/// Constructor.
	/// </summary>
	//////////////////////////////////////////////////////////
	CAccellerometer( const Eyw::OBJECT_CREATIONCTX* ctxPtr );
	
	//////////////////////////////////////////////////////////
	/// <summary>	
	/// Destructor.
	/// </summary>
	//////////////////////////////////////////////////////////
	~CAccellerometer();

protected:

	//////////////////////////////////////////////////////////
	/// <summary>
	/// Block signature initialization.
	/// </summary>
	//////////////////////////////////////////////////////////
	virtual void InitSignature();	// should also initialize layout and private data
	
	//////////////////////////////////////////////////////////
	/// <summary>
	/// Block signature check.
	/// </summary>
	//////////////////////////////////////////////////////////
	virtual void CheckSignature();
	
	//////////////////////////////////////////////////////////
	/// <summary>
	/// Block signature deinitialization.
	/// </summary>
	//////////////////////////////////////////////////////////
	virtual void DoneSignature();

	//////////////////////////////////////////////////////////
	/// Block Actions
	/// <summary>
	/// Block initialization action.
	/// </summary>
	/// <returns>
	/// true if success, otherwise false.
	/// </returns>
	//////////////////////////////////////////////////////////
	virtual bool Init() throw();

	//////////////////////////////////////////////////////////
	/// <summary>
	/// Block start action.
	/// </summary>
	/// <returns>
	/// true if success, otherwise false.
	/// </returns>
	//////////////////////////////////////////////////////////
	virtual bool Start() throw();

	//////////////////////////////////////////////////////////
	/// <summary>
	/// Block execution action.
	/// </summary>
	/// <returns>
	/// true if success, otherwise false.
	/// </returns>
	//////////////////////////////////////////////////////////
	virtual bool Execute() throw();

	//////////////////////////////////////////////////////////
	/// <summary>
	/// Block stop action.
	/// </summary>
	//////////////////////////////////////////////////////////
	virtual void Stop() throw();

	//////////////////////////////////////////////////////////
	/// <summary>
	/// Block deinitialization action.
	/// </summary>
	//////////////////////////////////////////////////////////
	virtual void Done() throw();

	//////////////////////////////////////////////////////////
	/// optionals
	/// <summary>
	/// Manage the ChangedParameter event.
	/// </summary>
	/// <param name="csParameterID">
	/// [in] id of the changed parameter.
	/// </param>
	//////////////////////////////////////////////////////////
	void OnChangedParameter( const std::string& csParameterID );

private:
	Eyw::double_ptr m_inputUserPtr;
	Eyw::double_ptr m_inputThetaPtr;
	Eyw::double_matrix_ptr m_measuredAccelerationPtr;
	Eyw::double_ptr m_alfaMinPtr;
	Eyw::double_ptr m_alfaMaxPtr;
	Eyw::double_ptr m_betaMinPtr;
	Eyw::double_ptr m_betaMaxPtr;
	Eyw::double_matrix_ptr m_gravityVectorPtr;

};
